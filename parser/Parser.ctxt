#BlueJ class context
comment0.target=Parser
comment0.text=\n\ Parser\ that\ executes\ Pascal-like\ statements\ after\ it\ parses\ them\n\n\ @author\ Amiya\ Chokhawala\ \n\ @version\ April\ 25,\ 2022\ \n
comment1.params=s
comment1.target=Parser(scanner.Scanner)
comment1.text=\n\ Parser\ Constructor\ \n\n\ @param\ s\ the\ scanner\n
comment10.params=global
comment10.target=ast.ProcedureDeclaration\ parseProcedure(environment.Environment)
comment10.text=\n\ Parses\ procedures\ \n\ \n\ @postcondition\ the\ procedure\ is\ parsed\ \n\ @return\ a\ new\ ProcedureDeclaration\n\ @throws\ IllegalArgument\ Exception,\ ScanErrorException\n
comment2.params=expectedToken
comment2.target=java.lang.String\ eat(java.lang.String)
comment2.text=\n\ Method\:\ eat\n\ Compares\ the\ value\ of\ the\ parameter\ with\ the\ value\ of\ currentToken.\ If\ they\ are\ the\ same,\n\ the\ methods\ advances\ in\ the\ input\ by\ one\ character.\ If\ they\ are\ not\ the\ same,\ \n\ the\ method\ throws\ an\ exception.\n\ @postcondition\ input\ string\ is\ advanced\ by\ one\ character\n\ @param\ expectedToken\ the\ expected\ value\ of\ currentToken\ \n\ @throws\ IllegalArgumentException\ whenn\ expected\ and\ currentToken\ are\ not\ the\ same\n\ @throws\ ScanErrorException\ whenn\ expected\ and\ currentChar\ are\ not\ the\ same\n
comment3.params=
comment3.target=ast.Number\ parseNumber()
comment3.text=\n\ Method\:\ parseNumber\n\ Parses\ integers\ \ \n\ @precondition\:\ current\ token\ is\ an\ integer\ \n\ @postcondition\:\ number\ token\ has\ been\ eaten\ \n\ @return\ the\ value\ of\ the\ parsed\ integer\ \n
comment4.params=
comment4.target=ast.Statement\ parseStatement()
comment4.text=\n\ Parses\ WRITELN\ statements,\ BEGIN\ and\ END\ statements,\ and\ IF\ and\ WHILE\ statements,\n\ and\ Assignments\ \n\ \n\ @return\ Statement\ depending\ on\ the\ tyep\ of\ statement\ parsed\n\ @throws\ IllegalArgument\ Exception,\ ScanErrorException\n
comment5.params=
comment5.target=ast.Condition\ parseCondition()
comment5.text=\n\ Parses\ conditions\ \n\ \n\ @postcondition\ the\ condition\ is\ parsed\ \n\ @return\ a\ new\ Condition\ object\n\ @throws\ IllegalArgument\ Exception,\ ScanErrorException\n
comment6.params=
comment6.target=ast.Expression\ parseFactor()
comment6.text=\n\ Parsers\ the\ current\ factor\ \n\ a\ factor\ can\ be\ a\ factor\ or\ term\ in\ parentheses,\ a\ -\ factor,\ a\ variable,\ or\ a\ number\n\ \n\ @postcondition\ the\ factor\ is\ parsed\n\ @return\ result\ an\ Expression\ that\ is\ either\ a\ Number,\ BinOp,\ or\ Variable\ \n\ @throws\ NumberFormatException,\ IllegalArgument\ Exception,\ ScanErrorException\n
comment7.params=
comment7.target=ast.Expression\ parseTerm()
comment7.text=\n\ Parses\ the\ term,\ any\ expression\ that\ can\ be\ added\ or\ subtracted\ \n\ which\ could\ be\ a\ term\ *\ factor,\ term\ /\ factor,\ or\ just\ a\ factor\ \n\ Parses\ the\ first\ factor\ and\ multiplies\ and\ divides\ until\ it\ reaches\ the\ end\ of\ the\ input\ \n\ \n\ @postcondition\ the\ term\ is\ parsed\n\ @return\ result\ the\ BinOp\ or\ an\ Expression\n\ @throws\ IllegalArgument\ Exception,\ ScanErrorException\n
comment8.params=
comment8.target=ast.Expression\ parseExpression()
comment8.text=\n\ Parses\ any\ expressions\ which\ can\ contain\ addition\ and\ subtraction\ \n\ \n\ @postcondition\ the\ expression\ is\ parsed\ \n\ @return\ result\ the\ BinOp\ or\ an\ Expression\n\ @throws\ IllegalArgument\ Exception,\ ScanErrorException\n
comment9.params=global
comment9.target=ast.Program\ parseProgram(environment.Environment)
comment9.text=\n\ Parses\ procedure\ declarations\ until\ the\ current\ token\ is\ not\ PROCEDURE\ \n\ \n\ @postcondition\ the\ program\ is\ parsed\ \n\ @return\ a\ new\ Program\ \n
numComments=11

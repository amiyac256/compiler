#BlueJ class context
comment0.target=Scanner
comment0.text=\n\ Scanner\ is\ a\ simple\ scanner\ for\ Compilers\ and\ Interpreters\n\ @author\ Amiya\ Chokhawala\ \n\ @version\ February\ 1,\ 2022\ \n\ \ \n\ Usage\:\n\ <The\ Scanner\ reads\ the\ input\ string\ and\ returns\ lexemes\ as\ a\ set\ of\ tokens.>\n\n
comment1.params=inStream
comment1.target=Scanner(java.io.InputStream)
comment1.text=\n\ Scanner\ constructor\ for\ construction\ of\ a\ scanner\ that\ \n\ uses\ an\ InputStream\ object\ for\ input.\ \ \n\ Usage\:\ \n\ FileInputStream\ inStream\ \=\ new\ FileInputStream(new\ File(<file\ name>);\n\ Scanner\ lex\ \=\ new\ Scanner(inStream);\n\ @param\ inStream\ the\ input\ stream\ to\ use\n
comment10.params=
comment10.target=java.lang.String\ scanNumber()
comment10.text=\n\ Scans\ the\ input\ string\ and\ returns\ a\ String\ for\ a\ \n\ lexeme\ of\ digits\ found\ in\ the\ input\ string.\ \n\ Throws\ an\ exception\ if\ there\ is\ no\ lexeme\ found.\n\ @return\ String\ representing\ a\ lexeme\ of\ digits\n\ @throws\ ScanErrorException\ when\ a\ lexeme\ is\ not\ found\n
comment11.params=
comment11.target=java.lang.String\ scanIndentifier()
comment11.text=\n\ Scans\ the\ input\ string\ and\ returns\ a\ String\ for\ \n\ a\ lexeme\ of\ letters\ found\ in\ the\ input\ string.\ \n\ Throws\ an\ exception\ if\ there\ is\ no\ lexeme\ found.\n\ @return\ String\ representing\ a\ lexeme\ of\ letters\n\ @throws\ ScanErrorException\ when\ a\ lexeme\ is\ not\ found\n
comment12.params=
comment12.target=java.lang.String\ scanOperand()
comment12.text=\n\ Scans\ the\ input\ string\ and\ returns\ a\ String\ \n\ for\ an\ operand\ found\ in\ the\ input\ string.\ \n\ Throws\ an\ exception\ if\ there\ is\ no\ lexeme\ found.\n\ @return\ String\ representing\ a\ lexeme\ for\ an\ operand\n\ @throws\ ScanErrorException\ when\ a\ lexeme\ is\ not\ found\n
comment13.params=
comment13.target=java.lang.String\ nextToken()
comment13.text=\n\ Method\:\ nextToken\n\ Skips\ the\ white\ space\ in\ the\ inputString\ and\ scans\ the\ tokens\ by\ calling\ the\ methods\ that\ are\ needed.\ \n\ Also\ skips\ one-line\ comments.\ \ \n\ @return\ a\ String\ representing\ a\ lexeme\ or\ "END"\ when\ the\ input\ stream\ is\ at\ end\ of\ file\n
comment2.params=inString
comment2.target=Scanner(java.lang.String)
comment2.text=\n\ Scanner\ constructor\ for\ constructing\ a\ scanner\ that\ \n\ scans\ a\ given\ input\ string.\ \ It\ sets\ the\ end-of-file\ flag\ an\ then\ reads\n\ the\ first\ character\ of\ the\ input\ string\ into\ the\ instance\ field\ currentChar.\n\ Usage\:\ Scanner\ lex\ \=\ new\ Scanner(input_string);\n\ @param\ inString\ the\ string\ to\ scan\n
comment3.params=
comment3.target=void\ getNextChar()
comment3.text=\n\ Method\:\ getNextChar\n\ Sets\ currentChar\ to\ the\ value\ read\ from\ the\ input\ string.\ If\ the\ read\ method\ returns\ -1\ \n\ when\ the\ input\ string\ is\ at\ the\ end\ of\ the\ file,\ the\ variable\ eof\ should\ be\ set\ to\ true.\n\ @postcondition\ currentChar\ is\ set\ to\ the\ value\ read\ from\ the\ input\ string\n\ \n
comment4.params=
comment4.target=boolean\ hasNext()
comment4.text=\n\ Method\:\ hasNext\n\ @return\ false\ if\ the\ input\ string\ is\ at\ the\ end\ of\ file\ \n
comment5.params=expected
comment5.target=void\ eat(char)
comment5.text=\n\ Method\:\ eat\n\ Compares\ the\ value\ of\ the\ parameter\ with\ the\ value\ of\ currentChar.\ If\ they\ are\ the\ same,\n\ the\ methods\ advances\ in\ the\ input\ string\ by\ one\ character.\ If\ they\ are\ not\ the\ same,\ \n\ the\ method\ throws\ an\ exception.\n\ @postcondition\ input\ string\ is\ advanced\ by\ one\ character\n\ @param\ expected\ the\ expected\ value\ of\ currentChar\ \n\ @throws\ ScanErrorException\ whenn\ expected\ and\ currentChar\ are\ not\ the\ same\n
comment6.params=c
comment6.target=boolean\ isDigit(char)
comment6.text=\n\ Method\:\ isDigit\ \n\ Determines\ where\ the\ input\ character\ is\ a\ digit\ (a\ number\ 0\ through\ 9\ inclusive).\ \n\ @param\ c\ character\ being\ checked\ \n\ @return\ true\ if\ the\ character\ is\ a\ digit;\ else,\n\ \ \ \ \ \ \ \ \ false\ \n
comment7.params=c
comment7.target=boolean\ isLetter(char)
comment7.text=\n\ Method\:\ isLetter\n\ Determines\ where\ the\ input\ character\ is\ a\ letter\ (a\ letter\ a/A\ through\ z/Z\ inclusive).\ \n\ @param\ c\ character\ being\ checked\ \n\ @return\ true\ if\ the\ character\ is\ a\ letter;\ else,\n\ \ \ \ \ \ \ \ \ false\n
comment8.params=c
comment8.target=boolean\ isWhiteSpace(char)
comment8.text=\n\ Method\:\ isWhiteSpace\ \n\ Determines\ where\ the\ input\ character\ is\ a\ empty\ space(a\ space,\ newline,\ tab,\ carriage\ \n\ return).\ \n\ @param\ c\ character\ being\ checked\ \n\ @return\ true\ if\ the\ character\ is\ a\ space;\ else,\n\ \ \ \ \ \ \ \ \ false\n
comment9.params=c
comment9.target=boolean\ isOperator(char)
comment9.text=\n\ Method\:\ isOperator\ \ \n\ Determines\ where\ the\ input\ character\ is\ an\ operator\n\ (a\ semicolon,\ equals\ sign,\ plus\ sign,\ etc).\ \n\ @param\ c\ character\ being\ checked\ \n\ @return\ true\ if\ the\ character\ is\ an\ operator;\ else,\n\ \ \ \ \ \ \ \ \ false\n
numComments=14
